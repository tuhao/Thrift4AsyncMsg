// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package crawler

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Operate int64

const (
	Operate_GET      Operate = 0
	Operate_DEL      Operate = 1
	Operate_ROLLBACK Operate = 2
)

func (p Operate) String() string {
	switch p {
	case Operate_GET:
		return "Operate_GET"
	case Operate_DEL:
		return "Operate_DEL"
	case Operate_ROLLBACK:
		return "Operate_ROLLBACK"
	}
	return "<UNSET>"
}

func OperateFromString(s string) (Operate, error) {
	switch s {
	case "Operate_GET":
		return Operate_GET, nil
	case "Operate_DEL":
		return Operate_DEL, nil
	case "Operate_ROLLBACK":
		return Operate_ROLLBACK, nil
	}
	return Operate(math.MinInt32 - 1), fmt.Errorf("not a valid Operate string")
}

type Type int64

const (
	Type_Weibo  Type = 0
	Type_News   Type = 1
	Type_BBS    Type = 2
	Type_Weixin Type = 3
	Type_QQ     Type = 4
	Type_Edit   Type = 5
	Type_Other  Type = 6
)

func (p Type) String() string {
	switch p {
	case Type_Weibo:
		return "Type_Weibo"
	case Type_News:
		return "Type_News"
	case Type_BBS:
		return "Type_BBS"
	case Type_Weixin:
		return "Type_Weixin"
	case Type_QQ:
		return "Type_QQ"
	case Type_Edit:
		return "Type_Edit"
	case Type_Other:
		return "Type_Other"
	}
	return "<UNSET>"
}

func TypeFromString(s string) (Type, error) {
	switch s {
	case "Type_Weibo":
		return Type_Weibo, nil
	case "Type_News":
		return Type_News, nil
	case "Type_BBS":
		return Type_BBS, nil
	case "Type_Weixin":
		return Type_Weixin, nil
	case "Type_QQ":
		return Type_QQ, nil
	case "Type_Edit":
		return Type_Edit, nil
	case "Type_Other":
		return Type_Other, nil
	}
	return Type(math.MinInt32 - 1), fmt.Errorf("not a valid Type string")
}

type Request struct {
	Operate Operate `thrift:"operate,1"`
	Start   int32   `thrift:"start,2"`
	Scope   int32   `thrift:"scope,3"`
	TypeA1  Type    `thrift:"type,4"`
}

func NewRequest() *Request {
	return &Request{
		Operate: math.MinInt32 - 1, // unset sentinal value

		TypeA1: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Request) IsSetOperate() bool {
	return int64(p.Operate) != math.MinInt32-1
}

func (p *Request) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Request) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Operate = Operate(v)
	}
	return nil
}

func (p *Request) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Start = v
	}
	return nil
}

func (p *Request) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Scope = v
	}
	return nil
}

func (p *Request) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.TypeA1 = Type(v)
	}
	return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Request"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperate() {
		if err := oprot.WriteFieldBegin("operate", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:operate: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Operate)); err != nil {
			return fmt.Errorf("%T.operate (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:operate: %s", p, err)
		}
	}
	return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scope", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:scope: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Scope)); err != nil {
		return fmt.Errorf("%T.scope (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:scope: %s", p, err)
	}
	return err
}

func (p *Request) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:type: %s", p, err)
		}
	}
	return err
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

type Data struct {
	Data   string `thrift:"data,1"`
	TypeA1 Type   `thrift:"type,2"`
}

func NewData() *Data {
	return &Data{
		TypeA1: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Data) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *Data) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Data) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Data = v
	}
	return nil
}

func (p *Data) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TypeA1 = Type(v)
	}
	return nil
}

func (p *Data) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Data"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Data) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:data: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return fmt.Errorf("%T.data (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:data: %s", p, err)
	}
	return err
}

func (p *Data) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type: %s", p, err)
		}
	}
	return err
}

func (p *Data) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Data(%+v)", *p)
}
